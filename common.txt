print
list
butlast
coll?
comp
complement
cons
cons?
constantly
dec
disassemble
empty?
eval
every?
exec
float?
fraction
even?
identity
inc
instance?
integer?
interleave
interpose
iterable?
iterator?
juxt
keyword
keyword?
list*
macroexpand
macroexpand-1
merge-with
name
neg?
none?
nth
numeric?
odd?
partition
pos?
second
some
string?
symbol?
zero?
defn
while
setv
cycle
distinct
drop
drop-last
drop-while
filter
flatten
iterate
read
read-str
remove
repeat
repeatedly
take
take-nth
take-while
and
as->
assert
assoc
break
comment
cond
continue
dict-comp
do
doc
defclass
defn
defn/a
defmain
defmacro
defmacro/g!
defmacro!
deftag
del
doto
eval-and-compile
eval-when-compile
first
for
for/a
genexpr
gensym
get
global
if
if*
if-not
lif
lif-not
import
fn
fn/a
last
list-comp
nonlocal
not
or
quasiquote
quote
require
rest
return
set-comp
cut
raise
try
unless
unpack-iterable
unpack-mapping
unquote
unquote-splice
when
while
with
with/a
with-decorator
with-gensyms
xor
yield
yield-from
